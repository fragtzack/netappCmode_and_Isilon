#!/tools/pandora64/bin/python3.7
"""Execute fs_bench_db.pl on multiple hosts. Either with LSF or ssh pki
"""
__author__ = "midenney.aBiz.com"
__version__ = "2.2.3"

import sys
import os
import pprint
import logging
import io
import copy 
import re
import shutil
import time
import datetime
import csv
import getpass
import mysql.connector

os.chdir(os.path.dirname(os.path.realpath(__file__)))
sys.path.append("../pylib")
import hosts
import rpt
import util
###########################################################################
def history():
     """
        1.0.0 initial skel
        2.0.0 ssh version using pdsh
        2.1.0 bug fixed, timeouts to pdsh
        2.2.0 default not client logging, added --client-log
        2.2.3 Now catches and logs permission denied instead of aborting.
     """
     pass
###########################################################################
## GLOBALS
###########################################################################
mydb = ''
mycur = ''
###########################################################################
def connect_mysql():
    """Open DB conenction""
       Set global mycur = mysql.cursor"""
    global mydb
    global mycur
    log.info("connect_mysql()")
    log.info("host->{} user->{} database->{}"
             .format(opts.mysql_host,opts.mysql_user,opts.mysql_db))
    try:
        mydb = mysql.connector.connect(
            host = opts.mysql_host,
            user = opts.mysql_user,
            passwd = opts.mysql_pw,
            database = opts.mysql_db
        )
        mycur = mydb.cursor(buffered=True)
        return(True)
    except Exception as err:
        log.error('Error connect to DB')
        log.error(err)
        return(False)
###########################################################################
def checkPath(path=None):
   """Check the path exists. Create log dir if not existing.
      Return True for any issues, return False for all OK."""
   if not os.path.exists(path):
       log.error("Test path {} does not exist".format(path))
       return True 
   logdir = "{}/log".format(path)
   try:
      os.mkdir(logdir)
   except FileExistsError:
      pass
   except PermissionError as pe:
      log.error(pe)
      return True
   return False

###########################################################################
def parseConf():
   """Parse the conf files for the list of mount paths and times to run against.
      Returns a dict of dicts"""
   tests = {}
   confFile = "{}/../etc/{}.conf".format(opts.scriptbin,opts.shortscript)
   try:
      with open(confFile, mode='r', encoding='ascii') as fh:
         for line in fh:
            line = line.partition('#')[0]
            if line.isspace(): continue
            line = line.rstrip()
            if line:
               lineSplit  = line.split()
               path = lineSplit[0]
               if checkPath(path) : continue
               tests.setdefault(path,{})['numhosts'] = lineSplit[1]
               if lineSplit[2].lower() == 'true':
                  tests[path]['verbose'] = True
               else:
                  tests[path]['verbose'] = False
   except FileNotFoundError as err:
         print(err)
         log.error(err)
         sys.exit()
   if not tests:
      print("No valid tests defined in {}".format(confFile))
      log.error("No valid tests defined in {}".format(confFile))
      sys.exit()
   return tests
      
###########################################################################
def getHosts(numHosts=None):
   """Get number of hosts to run against from lshosts command. 
      Choose lowest load hosts.
      Return a string of hosts seperate by comma
   """
   lsload = '/tool/lsf/atl02/10.1/linux2.6-glibc2.3-x86_64/bin/lsload'
   lcmd = '{} -n {}  -o HOST_NAME -R "select[r1m<=0.5 && status==ok && ! (dedicated||calX||phyv||rtllsmake||gb64||gb128||gb256||gb512||gb1024||gb2048)]"'.format(lsload,numHosts)
   #lcmd = """{} -n {}  -o HOST_NAME""".format(lsload,numHosts)
   ret,stdout,stderr = util.run_cmd(lcmd)
   if ret != 0 or stderr:
      print(ret,stderr,stdout)
      log.error(ret,stderr,stdout)
      return
   del stdout[0]
   log.info("{} hosts returned from lsload".format(len(stdout)))
   return ",".join(stdout)
###########################################################################
def wrapperHistory(logf=None,msg=None):
   dtime = datetime.datetime.now()
   try:
      f = open(logf, "a")
      f.write("{} {}\n".format(dtime,msg))
      f.close
   except Exception as err:
      log.error(err)
      return False
   return True 
###########################################################################
def executeTests(path=None,val=None,hosts=None):
   """Run the tests via pdsh"""
   filer = path.split('/')[2]
   epoch_time = int(time.time())
   testid = "wrap_{}_{}".format(filer,epoch_time)
   verb = ""
   if val['verbose']:
      verb = '--verbose'
   log.info("Filer = {} testid = {}".format(filer,testid))
   wLog = "{}/log/wrapperHistory.log".format(path)
   if not wrapperHistory(wLog," Starting test {}".format(testid)): return
   ecmd  = 'pdsh -d -t 30 -u 120 -w {} "/tools/sysadmin/netapp/makefs/dev/makefs/makefs/bin/fs_bench_db.pl'.format(hosts)
   ecmd += ' --testid {} --path {} {}'.format(testid,path,verb)
   text_output = ' > /dev/null 2<&1"'
   if opts.clog or verb:
       text_output = ' >> {}/log/$(hostname).log 2>&1"'.format(path)
   ecmd += text_output
   log.info("Running parallel tests CMD: {}".format(ecmd))
   ret,stdout,stderr = util.run_cmd(ecmd)
   if ret != 0 or stderr:
      print(ret,stderr,stdout)
      try:
         log.error("{} {} {}".format(ret,stdout,stderr))
      except TypeError as err:
         log.error(err)
      return
   dtime = datetime.datetime.now()
   wrapperHistory(wLog,"Test completed for {}".format(testid))
   log.info("Completed tests for {}".format(path))
###########################################################################
def killTests(hosts=None):
   """pkill -9 on each host case something hangs"""
   ecmd  = '/tool/sysadmin/bin/sudo pdsh -d -t 30 -u 120 -w {} "pkill -9 fs_bench_db'.format(hosts)
###########################################################################
def runTests(tests=None):
   """Loop throught the test paths, running tests"""
   for path, val in tests.items():
      log.info("Processing {} {} {}".format(path,val['numhosts'],val['verbose']))
      hosts = getHosts(val['numhosts'])
      log.debug("hosts from lsload = {}".format(hosts))
      executeTests(path,val,hosts)
      time.sleep(60)
      killTests(hosts)
   sys.exit()
    
###########################################################################
def main():
    log.info("START")
    global opts
    opts=hosts.SetOpts(opts=argo,main='hosts',script=False)
    log.debug(pprint.pformat(opts.__dict__))
    lop=hosts.SetOpts(opts=opts,flavor='linux')
    if not connect_mysql():
        log.error("unable to connect to dataservices mysql")
        hosts.errors_check(host='NA')
        hosts.errors_alert(opts)
        sys.exit()
    mycur.close()
    user = getpass.getuser()
    log.info("Start : user = {}".format(user))
    tests = parseConf()
    runTests(tests)
    hosts.errors_check(host='NA')
    hosts.errors_alert(opts)
    log.info("END")
##########################################################################
"""options hash/objects used in script:
     argo = command line args.
     opts = main options from argo and hosts.conf file.
     op   = options from flavor (vnx.conf, netapp.conf, script.conf) 
            combined with opts.
"""
###########################################################################
if __name__ == "__main__":
   script_name = os.path.basename(sys.argv[0])
   d = ("Execute fs_bench_db.pl on X number of clients defined in <script_dir>/../etc/{}.conf".format(script_name))
   argo=hosts.ArgParseBare(description = d)
   argo.add_argument('-c','--clog',action='store_true',help='Create a log file for each client')
   #argo.add_argument('-H','-ho','--host',default=[],action='append',help='Specify host. Multiple --host allowed.')
   argo=argo.parse_args()
   if argo.version : print (argo.script + " Version " + __version__) 
   if argo.history : print (history.__doc__)
   if argo.version or argo.history: sys.exit()
   log = logging.getLogger()
   hosts.config_logging(opt=argo)
   log.debug(pprint.pformat(argo.__dict__))
   main()
   sys.exit(0)
